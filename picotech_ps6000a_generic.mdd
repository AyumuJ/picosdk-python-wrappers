<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>C:\Users\neil.hamilton\Documents\MATLAB\picosdk-ps6000a-matlab-instrument-driver\picotech_ps6000a_generic.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>Pico Technology Ltd.</InstrumentManufacturer>
   <InstrumentModel>PicoScope 6000E Series</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2020 Pico Technology Ltd.  All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    fprintf('PicoScope 6000 Series (A API) MATLAB Instrument Driver');
    fprintf('\n');
    fprintf('\nCopyright © 2020 Pico Technology Ltd.  All rights reserved. \n')
    fprintf('\n');
    
    % Load libraries
    % ==============
    
    % Only load library once
    
    if (libisloaded('ps6000a'))
        
           % do nothing
           
    else
        
        if (ismac())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('libps6000a.dylib', @ps6000aMFile, 'alias', 'ps6000a');
            
        elseif (isunix())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('libps6000a.so', @ps6000aMFile, 'alias', 'ps6000a');
            
        elseif (ispc())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('ps6000a.dll', @ps6000aMFile);
            
        else
            
            % do nothing
            
        end
        
    end
    
    % Load in enums and structures
    
    [~, obj.DriverData.structs, obj.DriverData.enums, ~] = ps6000aMFile();</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2020 Pico Technology Ltd. All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    disp('Opening PicoScope 6000 Series (A API) device');
    
    % Structure to hold satus values while connectin.
    connectStatus = [];
    
    % Temporary variable to store handle value
    unitHandle = 0;
    
    picoOK = PicoStatus.PICO_OK;
    
    % Obtain serial number input
    serialNum = get(obj, 'RsrcName');
    
    % determine if serial number given
    if length(serialNum) &gt; 0
        
        unitSerial = serialNum;
        
    else
        
        unitSerial = [];
        
    end
    
    % Open with 8 bit resolution
    resolution8bit = obj.DriverData.enums.enPicoDeviceResolution.PICO_DR_8BIT;
    obj.DriverData.resolution = resolution8bit;
    
    [connectStatus.openUnit, obj.DriverData.unitHandle, ~] = ...
        calllib('ps6000a','ps6000aOpenUnit',unitHandle, unitSerial,resolution8bit);
    
    % Validate handle
    if (obj.DriverData.unitHandle &gt; 0)
        
        unithandle = obj.DriverData.unitHandle;
%         
        % Set serial
        infoLine = blanks(40);
        reqSize = length(infoLine);
        
%         [connectStatus.unitSerial, obj.DriverData.unitSerial, reSize] = ...
%             calllib('ps6000a','ps6000aGetUnitInfo',unitHandle,infoLine, ...
%             length(infoLine),reqSize,PicoStatus.PICO_BATCH_AND_SERIAL);
%         
%         % Set variant
        infoLineV = blanks(15);
        reqSizeV = 15;
%         
%         [connectStatus.unitVariant, variant, ~] = calllib('ps6000a', ...
%             'ps6000aGetUnitInfo', unitHandle, infoLineV, length(infoLineV),...
%             reqSizeV, PicoStatus.PICO_VARIANT_INFO);
%         
%         set(obj, 'InstrumentModel', variant);
%         
%         % Set channel count
%         obj.DriverData.channelCount = str2num(obj.InstrumentModel(2));
%         
    elseif (connectStatus.openUnit == PicoStatus.PICO_NOT_FOUND)
        
        error('No unit found, please check connections.');
        
    else
        
        error('Status code: %d\n', connectStatus.openUnit);
        
    end
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

    if (isfield(obj.DriverData, 'unitHandle'))
        
        unitHandle = obj.DriverData.unitHandle;
        
        if (isempty(unitHandle))
            return;
        end
        
        if (~libisloaded('ps6000a'))
            
            return
            
        end
        
        % Close scope
        
        disconnectStatus = calllib('ps6000a','ps6000aCloseUnit', unitHandle);
        
        if (disconnectStatus == PicoStatus.PICO_OK)
            
            fprintf(['PicoScope closed successfully.\n']);
            
        elseif (disconnectStatus == PicoStatus.PICO_INVALID_HANDLE)
            
            return
            
        else
            
%             if (isfield(obj.DriverData, 'unitSerial'))
%                 
%                 error('Disconnect: ConnectionNotClosed',...
%                     ['Connection to PicoScope not closed. Status code %d\n']...
%                     ,disconnectStatus);
%                 
%             end
            
        end
        
%         % unload libraries if no other scopes are connected
%         
%         firestHandle = 0;
%         
%         if (ispc())
%             
%             firstHandle = 16384; % Windows PC
%             
%         else

    else
        warning('Disconnect:NoDevicesFound', 'Disconnect: No devices found.');
    end
%             
%             firstHandle = 1; % Mac and Linux
%             
%         end
%         
%         % test connection to other handles
%         lastHandle = firstHandle + 63 % obj.DriverData.constants.PICO_MAX_UNITS</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>channelCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>resolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitHandle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitSerial</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ps6000aGetMinimumTimebaseStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetMinimumTimebaseStateless(obj, enabledChannelFlags, timebase, timeInterval, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

        status = calllib('ps6000a','ps6000aGetMinimumTimebaseStateless', obj.DriverData.unitHandle, enabledChannelFlags,...
        timebase, timeInterval, resolution);
    
        if (status == PicoStatus.PICO_OK)
        
        else
        
            error('ps6000aGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
        end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValues(obj, startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetValues',obj.DriverData.unitHandle,...
        startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow)
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aIsReady</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aIsReady(obj, ready)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aIsReady',obj.DriverData.unitHandle,ready);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aRunBlock</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aRunBlock(obj, noOfPreTriggerSamples, noOfPostTriggerSamples, timebase,timeIndisposedMs, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% no inputs for lpReady or pParameter as these are for callbacks that aren't
% used

    lpReady = [];
    pParameter = [];

    status = calllib('ps6000a','ps6000aRunBlock',obj.DriverData.unitHandle, noOfPreTriggerSamples,...
        noOfPostTriggerSamples, timebase, timeIndisposedMs, segmentIndex, lpReady, pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aRunBlock: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetChannelOff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetChannelOff(obj, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetChannelOff', obj.DriverData.unitHandle, channel);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetChannelOff: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetChannelOn</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetChannelOn(obj, channel, coupling, range, analogueOffset, bandwidth)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aSetChannelOn', obj.DriverData.unitHandle,...
        channel, coupling, range, analogueOffset, bandwidth);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetChannelOn: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDataBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDataBuffer(obj, channel, buffer, nSamples, dataType, waveform, downSampleRatioMode, action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    status = calllib('ps6000a','ps6000aSetDataBuffer', obj.DriverData.unitHandle,channel, buffer, nSamples,...
        dataType, waveform, downSampleRatioMode, action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDataBuffer: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDeviceResolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDeviceResolution(obj, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetDeviceResolution',obj.DriverData.unitHandle, resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDeviceResolution: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end
    
    obj.DriverData.resolution = resolution;</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetSimpleTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetSimpleTrigger(obj, enable, source, threshold, direction, delay, autoTriggerMicroSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetSimpleTrigger', obj.DriverData.unitHandle, enable, source,...
        threshold, direction, delay, autoTriggerMicroSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetSimpleTrigger: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>
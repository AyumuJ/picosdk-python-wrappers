<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>C:\Users\neil.hamilton\Documents\MATLAB\picosdk-ps6000a-matlab-instrument-driver\picotech_ps6000a_generic.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>Pico Technology Ltd.</InstrumentManufacturer>
   <InstrumentModel>PicoScope 6000E Series</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2020 Pico Technology Ltd.  All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    fprintf('PicoScope 6000 Series (A API) MATLAB Instrument Driver');
    fprintf('\n');
    fprintf('\nCopyright © 2020 Pico Technology Ltd.  All rights reserved. \n')
    fprintf('\n');
    
    % Load libraries
    % ==============
    
    % Only load library once
    
    if (libisloaded('ps6000a'))
        
           % do nothing
           
    else
        
        if (ismac())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('libps6000a.dylib', @ps6000aMFile, 'alias', 'ps6000a');
            
        elseif (isunix())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('libps6000a.so', @ps6000aMFile, 'alias', 'ps6000a');
            
        elseif (ispc())
            
            [ps6000aNotFound, ps6000aWarnings] = loadlibrary('ps6000a.dll', @ps6000aMFile);
            
        else
            
            % do nothing
            
        end
        
    end
    
    % Load in enums and structures
    
    [~, obj.DriverData.structs, obj.DriverData.enums, ~] = ps6000aMFile();</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2020 Pico Technology Ltd. All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    disp('Opening PicoScope 6000 Series (A API) device');
    
    % Structure to hold satus values while connectin.
    connectStatus = [];
    
    % Temporary variable to store handle value
    unitHandle = 0;
    
    picoOK = PicoStatus.PICO_OK;
    
    % Obtain serial number input
    serialNum = get(obj, 'RsrcName');
    
    % determine if serial number given
    if length(serialNum) &gt; 0
        
        unitSerial = serialNum;
        
    else
        
        unitSerial = [];
        
    end
    
    % Open with 8 bit resolution
    resolution8bit = obj.DriverData.enums.enPicoDeviceResolution.PICO_DR_8BIT;
    obj.DriverData.resolution = resolution8bit;
    
    [connectStatus.openUnit, obj.DriverData.unitHandle, ~] = ...
        calllib('ps6000a','ps6000aOpenUnit',unitHandle, unitSerial,resolution8bit);
    
    % Validate handle
    if (obj.DriverData.unitHandle &gt; 0)
        
        unithandle = obj.DriverData.unitHandle;
%         
        % Set serial
        infoLine = blanks(40);
        reqSize = length(infoLine);
        
%         [connectStatus.unitSerial, obj.DriverData.unitSerial, reSize] = ...
%             calllib('ps6000a','ps6000aGetUnitInfo',unitHandle,infoLine, ...
%             length(infoLine),reqSize,PicoStatus.PICO_BATCH_AND_SERIAL);
%         
%         % Set variant
        infoLineV = blanks(15);
        reqSizeV = 15;
%         
%         [connectStatus.unitVariant, variant, ~] = calllib('ps6000a', ...
%             'ps6000aGetUnitInfo', unitHandle, infoLineV, length(infoLineV),...
%             reqSizeV, PicoStatus.PICO_VARIANT_INFO);
%         
%         set(obj, 'InstrumentModel', variant);
%         
%         % Set channel count
%         obj.DriverData.channelCount = str2num(obj.InstrumentModel(2));
%         
    elseif (connectStatus.openUnit == PicoStatus.PICO_NOT_FOUND)
        
        error('No unit found, please check connections.');
        
    else
        
        error('Status code: %d\n', connectStatus.openUnit);
        
    end
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

    if (isfield(obj.DriverData, 'unitHandle'))
        
        unitHandle = obj.DriverData.unitHandle;
        
        if (isempty(unitHandle))
            return;
        end
        
        if (~libisloaded('ps6000a'))
            
            return
            
        end
        
        % Close scope
        
        disconnectStatus = calllib('ps6000a','ps6000aCloseUnit', unitHandle);
        
        if (disconnectStatus == PicoStatus.PICO_OK)
            
            fprintf(['PicoScope closed successfully.\n']);
            
        elseif (disconnectStatus == PicoStatus.PICO_INVALID_HANDLE)
            
            return
            
        else
            
%             if (isfield(obj.DriverData, 'unitSerial'))
%                 
%                 error('Disconnect: ConnectionNotClosed',...
%                     ['Connection to PicoScope not closed. Status code %d\n']...
%                     ,disconnectStatus);
%                 
%             end
            
        end
        
%         % unload libraries if no other scopes are connected
%         
%         firestHandle = 0;
%         
%         if (ispc())
%             
%             firstHandle = 16384; % Windows PC
%             
%         else

    else
        warning('Disconnect:NoDevicesFound', 'Disconnect: No devices found.');
    end
%             
%             firstHandle = 1; % Mac and Linux
%             
%         end
%         
%         % test connection to other handles
%         lastHandle = firstHandle + 63 % obj.DriverData.constants.PICO_MAX_UNITS</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>channelCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>resolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitHandle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitSerial</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ps6000aChannelCombinationsStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aChannelCombinationsStateless(obj,channelFlagsCombinations,nChannelCombinations,resolution,timebase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aChannelCombinationsStateless',obj.DriverData.unitHandle,...
        channelFlagsCombinations,nChannelCombinations,resolution,timebase);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aChannelCombinationsStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aEnumerateUnits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aEnumerateUnits(obj, count, serials, serialLth)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aEnumerateUnits',count,serials,serialLth);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aEnumerateUnits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aFlashLed</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aFlashLed(obj, start)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aFlashLed',obj.DriverData.unitHandle, start);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aFlashLed: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetAdcLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetAdcLimits(obj, resolution, minValue, maxValue)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetAdcLimits', obj.DriverData.unitHandle, resolution, minValue, maxValue);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetAdcLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetAnalogueOffsetLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetAnalogueOffsetLimits(obj,range,coupling,maximumVoltage,minimimVoltage)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetAnalogueOffsetLimits',obj.DriverData.unitHandle,range,coupling,...
        maximumVoltage,minimumVoltage);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetAnalogueOffsetLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetDeviceResolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetDeviceResolution(obj,resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetDevieResolution',obj.DriverData.unitHandle,resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetDeviceResolution: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetMaximumAvailableMemory</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetMaximumAvailableMemory(obj, nMaxSamples, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetMaximumAvailableMemory',obj.DriverData.unitHandle, nMaxSamples,resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetMaximumAvailableMemory: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetMinimumTimebaseStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetMinimumTimebaseStateless(obj, enabledChannelFlags, timebase, timeInterval, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

        status = calllib('ps6000a','ps6000aGetMinimumTimebaseStateless', obj.DriverData.unitHandle, enabledChannelFlags,...
        timebase, timeInterval, resolution);
    
        if (status == PicoStatus.PICO_OK)
        
        else
        
            error('ps6000aGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
        end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetNoOfCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetNoOfCaptures(obj,nCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetNoOfCaptures',obj.DriverData.unitHandle,nCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetNoOfCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetNoOfProcessedCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetNoOfProcessedCaptures(obj,nProcessedCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetNoOfProcessedCaptures',obj.DriverData.unitHandle,nProcessedCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetNoOfProcessedCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetScalingValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetScalingValues(obj,scalingValues,nChannels)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetScalingValues',obj.DriverData.unitHandle,scalingValues,nChannels);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetScalingValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetStreamingLatestValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetStreamingLatestValues(obj, streamingDataInfo, nStreamingDataInfos, triggerInfo)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetStreamingLatestValues',obj.DriverData.unitHandle,...
        streamingDataInfo, nStreamingDataInfos, triggerInfo);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetTimebase</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetTimebase(obj,timebase, noSamples, timeIntervalNanoseconds, maxSamples, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetTimebase',obj.DriverData.unitHandle, timebase, noSamples,...
        timeIntervalNanoseconds, maxSamples,segmentIndex);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetTriggerInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetTriggerInfo(obj,triggerInfo,firstSegmentIndex,segmentCount)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetTriggerInfo',obj.DriverData.unitHandle,triggerInfo,firstSegmentIndex,...
        segmentCount);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetTriggerInfo: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetTriggerTimeOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetTriggerTimeOffset(obj,time,timeUnits,segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetTriggerTimeOffset',obj.DriverData.unitHandle,time,timeUnits,...
        segmentIndex);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetTriggerTimeOffset: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetUnitInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetUnitInfo(obj, string, stringLength, requiredSize, info)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetUnitInfo',obj.DriverData.unitHandle, string, stringLength, requiredSize, info);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetUnitInfo: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValues(obj, startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    [status] = calllib('ps6000a','ps6000aGetValues',obj.DriverData.unitHandle,...
        startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow);

   
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValuesAsync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValuesAsync(obj,startIndex,noOfSamples,downSampleRatio,downSampleRatioMode,segmentIndex,...
    lpDataReady,pParameter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetValuesAsync',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        downSampleRatio,downSampleRatioMode,segmentIndex,lpDataReady,pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValuesAsync: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValuesBulk</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValuesBulk(obj, startIndex, noOfSamples, fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode, overflow)

% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aGetValuesBulk', obj.DriverData.unitHandle, startIndex, noOfSamples,...
        fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode, overflow);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValuesBulk: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValuesBulkAsync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValuesBulkAsync(obj,startIndex,noOfSamples,fromSegmentIndex,toSegmentIndex,downSampleRatio,...
    downSampleRatioMode,lpDataReady,pParameter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetValuesBulkAsync',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        fromSegmentIndex,toSegmentIndex,downSampleRatio,downSampleRatioMode,lpDataReady,pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValuesBulkAsync: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValuesOverlapped</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValuesOverlapped(obj,startIndex,noOfSamples,downSampleRatio,downSampleRatioMode,...
    fromSegmentIndex,toSegmentIndex,overflow)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetValuesOverlapped',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        downSampleRatio,downSampleRatioMode,fromSegmentIndex,toSegmentIndex,overflow);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValuesOverlapped: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aGetValuesTriggerTimeOffsetBulk</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aGetValuesTriggerTimeOffsetBulk(obj,time,timeUnits,fromSegmentIndex,toSegmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aGetValuesTriggerTimeOffsetBulk',obj.DriverData.unitHandle,time,...
        timeUnits,fromSegmentIndex,toSegmentIndex);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetValuesTriggerTimeOffsetBulk: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aIsReady</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aIsReady(obj, ready)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aIsReady',obj.DriverData.unitHandle,ready);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aMemorySegments</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aMemorySegments(obj, nSegments, nMaxSamples)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aMemorySegments', obj.DriverData.unitHandle, nSegments, nMaxSamples);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aMemorySegments: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aMemorySegmentsBySamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aMemorySegmentsBySamples(obj, nSamples, nMaxSegments)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aMemorySegmentsBySamples', obj.DriverData.unitHandle, nSamples, nMaxSegments);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aMemorySegmentsBySamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aNearestSampleIntervalStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aNearestSampleIntervalStateless(obj,enabledChannelFlags,timeIntervalRequested,resolution,...
    timebase,timeIntervalAvailable)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aNearestSampleIntervalStateless',obj.DriverData.unitHandle,enabledChannelFlags,...
        timeIntervalRequested,resolution,timebase,timeIntervalAvailable);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aNearestSampleIntervalStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aNoOfStreamingValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aNoOfStreamingValues(obj,noOfValues)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aNoOfStreamingValues',obj.DriverData.unitHandle,noOfValues);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aNoOfStreamingValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aPingUnit</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aPingUnit(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aPingUnit',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aPingUnit: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aQueryMaxSegmentsBySamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aQueryMaxSegmentsBySamples(obj, nSamples, nChannelsEnabled, nMaxSegments, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aQueryMaxSegmentsBySamples',obj.DriverData.unitHandle, nSamples, nChannelsEnabled,...
        nMaxSegments, resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aQueryMaxSegmentsBySamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aQueryOutputEdgeDetect</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aQueryOutputEdgeDetect(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aQueryOutputEdgeDetect',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aQueryOutputEdgeDetect: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aRunBlock</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aRunBlock(obj, noOfPreTriggerSamples, noOfPostTriggerSamples, timebase,timeIndisposedMs, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% no inputs for lpReady or pParameter as these are for callbacks that aren't
% used

    lpReady = [];
    pParameter = [];

    status = calllib('ps6000a','ps6000aRunBlock',obj.DriverData.unitHandle, noOfPreTriggerSamples,...
        noOfPostTriggerSamples, timebase, timeIndisposedMs, segmentIndex, lpReady, pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aRunBlock: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aRunStreaming</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aRunStreaming(obj, sampleInterval, sampleIntervalTimeUnits, maxPreTriggerSamples, maxPostTriggerSamples, autoStop, downSampleRatio, downSampleRatioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aRunStreaming', obj.DriverData.unitHandle, sampleInterval,...
        sampleIntervalTimeUnits, maxPreTriggerSamples, maxPostTriggerSamples, autoStop,...
        downSampleRatio, downSampleRatioMode);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aRunStreaming: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetChannelOff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetChannelOff(obj, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetChannelOff', obj.DriverData.unitHandle, channel);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetChannelOff: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetChannelOn</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetChannelOn(obj, channel, coupling, range, analogueOffset, bandwidth)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aSetChannelOn', obj.DriverData.unitHandle,...
        channel, coupling, range, analogueOffset, bandwidth);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetChannelOn: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDataBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDataBuffer(obj, channel, buffer, nSamples, dataType, waveform, downSampleRatioMode, action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    status = calllib('ps6000a','ps6000aSetDataBuffer', obj.DriverData.unitHandle,channel, buffer, nSamples,...
        dataType, waveform, downSampleRatioMode, action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDataBuffer: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDataBuffers</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDataBuffers(obj, channel, bufferMax, bufferMin, nSamples, dataType, waveform, downSampleRatioMode, action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a', 'ps6000aSetDataBuffers', obj.DriverData.unitHandle, channel, bufferMax,...
        bufferMin, nSamples, dataType, waveform, downSampleRatioMode, action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDataBuffers: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDeviceResolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDeviceResolution(obj, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetDeviceResolution',obj.DriverData.unitHandle, resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDeviceResolution: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end
    
    obj.DriverData.resolution = resolution;</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDigitalPortOff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDigitalPortOff(obj, port)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    status = calllib('ps6000a', 'ps6000aSetDigitalPortOff', obj.DriverData.unitHandle, port)
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDigitalPortOff: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetDigitalPortOn</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetDigitalPortOn(obj, port, logicThresholdLevel, logicThresholdLevelLength, hysteresis)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetDigitalPortOn', obj.DriverData.unitHandle, port,...
        logicThresholdLevel, logicThresholdLevelLength, hysteresis);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetDigitalPortOn: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetNoOfCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetNoOfCaptures(obj,nCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetNoOfCaptures',obj.DriverData.unitHandle,nCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetNoOfCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetOutputEdgeDetect</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetOutputEdgeDetect(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetOutputEdgeDetect',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetOutputEdgeDetect: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetPulseWidthDigitalPortProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetPulseWidthDigitalPortProperties(obj,port,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetPulseWidthDigitalPortProperties',obj.DriverData.unitHandle,...
        port,directions,nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetPulseWidthDigitalPortProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetPulseWidthQualifierConditions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetPulseWidthQualifierConditions(obj, conditions,nConditions,action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetPulseWidthQualifierConditions',obj.DriverData.unitHandle,...
        conditions,nConditions,action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetPulseWidthQualifierConditions: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetPulseWidthQualifierDirections</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetPulseWidthQualifierDirections(obj,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetPulseWidthQualifierDirections',obj.DriverData.unitHandle,directions,...
        nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetPulseWidthQualifierDirections: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetPulseWidthQualifierProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetPulseWidthQualifierProperties(obj,lower,upper,type)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetPulseWidthQualifierProperties',obj.DriverData.unitHandle,...
        lower,upper,type);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetPulseWidthQualifierProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetSimpleTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetSimpleTrigger(obj, enable, source, threshold, direction, delay, autoTriggerMicroSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetSimpleTrigger', obj.DriverData.unitHandle, enable, source,...
        threshold, direction, delay, autoTriggerMicroSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetSimpleTrigger: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetTriggerChannelConditions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetTriggerChannelConditions(obj,conditions,nConditions,action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetTriggerChannelConditions',obj.DriverData.unitHandle,conditions,...
        nConditions,action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetTriggerChannelConditions: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetTriggerChannelDirections</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetTriggerChannelDirections(obj,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetTriggerChannelDirections',obj.DriverData.unitHandle,directions,...
        nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetTriggerChannelDirections: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetTriggerChannelProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetTriggerChannelProperties(obj,channelProperties,nChannelProperties,auxOutputEnable,autoTriggerMicroSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetTriggerChannelProperties',obj.DriverData.unitHandle,channelProperties,...
        nChannelProperties,auxOutputEnable,autoTriggerMicroSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetTriggerChannelProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetTriggerDelay</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetTriggerDelay(obj,delay)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetTriggerDelay',obj.DriverData.unitHandle,delay);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetTriggerDelay: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSetTriggerDigitalPortProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSetTriggerDigitalPortProperties(obj,port,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSetTriggerDigitalPortProperties',obj.DriverData.unitHandle,port,...
        directions,nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSetTriggerDigitalPortProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenApply</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenApply(obj,sigGenEnabled,sweepEnabled,triggerEnabled,automaticClockOptimisationEnabled,...
    overrideAutomaticClockAndPrescale,frequency,stopFrequency,frequencyIncrement,dwellTime)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenApply',obj.DriverData.unitHandle,signGenEnabled,sweepEnabled,...
        triggerEnabled,automaticClockOptimisationEnabled,overrideAutomaticClockAndPrescale,frequency,stopFrequency,...
        frequencyIncrement,dwellTime);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenApply: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenClockManual</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenClockManual(obj,dacClockFrequency,prescaleRatio)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenClockManual',obj,DriverData.unitHandle,dacClockFrequency,prescaleRatio);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenClockManual: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenFilter</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenFilter(obj,filterState)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenFilter',obj.DriverData.unitHandle,filterState);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenFilter: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenFrequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenFrequency(obj,frequencyHz)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenFrequency',obj.DriverData.unitHandle,frequencyHz);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenFrequency: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenFrequencyLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenFrequencyLimits(obj,waveType,numSamples,startFrequency,sweepEnabled,manualDacClockFrequency,...
    manualPrescaleRatio,maxStopFrequencyOut,minFrequencyStepOut,maxFrequencyStepOut,minDwellTimeOut,maxDwellTimeOut)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenFrequencyLimits',obj.DriverData.unitHandle,waveType,numSamples,startFrequency,...
        sweepFrequency,sweepEnabled,manualDacClockFrequency,manualPrescaleRatio,maxStopFrequencyOut,...
        minFrequencyStepOut,maxFrequencyStepOut,minDwellTimeOut,maxDwellTimeOut);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenFrequencyLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenFrequencySweep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenFrequencySweep(obj,stopFrequencyHz,frequencyIncrement,dwellTimeSeconds,sweepType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenFrequencySweep',obj.DriverData.unitHandle,stopFrequencyHz,...
        frequencyIncrement,dwellTimeSeconds,sweepType);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenFrequencySweep: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenLimits(obj,parameter,minimumPermissibleValue,maximumPermissibleValue,step)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenLimits',obj.DriverData.unitHandle,parameter,minimumPermissibleValue,...
        maximumPermissibleValue, step);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenPause</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenPause(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenPause',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenPause: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenPhase</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenPhase(obj,deltaPhase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenPhase',obj.DriverData.unitHandle,deltaPhase);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenPhase: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenPhaseSweep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenPhaseSweep(obj,stopDeltaPhase,deltaPhaseIncrement,swellCount,sweepType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','pa6000aSigGenPhaseSweep',obj.DriverData.unitHandle,stopDeltaPhase,...
        deltaPhaseIncrement,swellCount,sweepType);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenPhaseSweep: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenRange(obj,peakToPeakVolts,offsetVolts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenRange',obj.DriverData.unitHandle,peakToPeakVolts,offsetVolts);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenRange: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenRestart</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenRestart(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenRestart',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenRestart: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenSoftwareTriggerControl</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenSoftwareTriggerControl(obj,triggerState)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenSoftwareTriggerControl',obj.DriverData.unitHandle,triggerState);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenSoftwareTriggerControl: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenTrigger(obj,triggerType,triggerSource,cycles,autoTriggerPicoSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenTrigger',obj.DriverData.unitHandle,triggerType,triggerSource,...
        cycles,autoTriggerPicoSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenTrigger: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenWaveform</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenWaveform(obj, wavetype, buffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenWaveform',obj.DriverData.unitHandle,wavetype,buffer,bufferLength);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenWaveform: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aSigGenWaveformDutyCycle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aSigGenWaveformDutyCycle(obj,dutyCyclePercent)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aSigGenWaveformDutyCycle',obj.DriverData.unitHandle,dutyCyclePercent)
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aSigGenWaveformDutyCycle: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aStop</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aStop(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aStop',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aStop: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aStopUsingGetValuesOverlapped</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aStopUsingGetValuesOverlapped(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps6000a','ps6000aStopUsingGetValuesOverlapped',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aStopUsingGetValuesOverlapped: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>ps6000aTriggerWithinPreTriggerSamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps6000aTriggerWithinPreTriggerSamples(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps600a','ps6000aTriggerWithinPreTriggerSamples',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('ps6000aTriggerWithinPreTriggerSamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>
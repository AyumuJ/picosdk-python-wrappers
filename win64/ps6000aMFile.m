function [methodinfo,structs,enuminfo,ThunkLibName]=ps6000aMFile
%PS6000AMFILE Create structures to define interfaces found in 'ps6000aApi'.

%This function was generated by loadlibrary.m parser version  on Fri Dec 18 12:52:31 2020
%perl options:'ps6000aApi.i -outfile=ps6000aMFile.m -thunkfile=ps6000a_thunk_pcwin64.c -header=ps6000aApi.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ps6000a_thunk_pcwin64');
% PICO_STATUS ps6000aOpenUnit ( int16_t * handle , int8_t * serial , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aOpenUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int8Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aOpenUnitAsync ( int16_t * status , int8_t * serial , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aOpenUnitAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int8Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aOpenUnitProgress ( int16_t * handle , int16_t * progressPercent , int16_t * complete ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aOpenUnitProgress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetUnitInfo ( int16_t handle , int8_t * string , int16_t stringLength , int16_t * requiredSize , PICO_INFO info ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16voidPtruint32Thunk';fcns.name{fcnNum}='ps6000aGetUnitInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int8Ptr', 'int16', 'int16Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aCloseUnit ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aCloseUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aFlashLed ( int16_t handle , int16_t start ); 
fcns.thunkname{fcnNum}='uint32int16int16Thunk';fcns.name{fcnNum}='ps6000aFlashLed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aMemorySegments ( int16_t handle , uint64_t nSegments , uint64_t * nMaxSamples ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtrThunk';fcns.name{fcnNum}='ps6000aMemorySegments'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aMemorySegmentsBySamples ( int16_t handle , uint64_t nSamples , uint64_t * nMaxSegments ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtrThunk';fcns.name{fcnNum}='ps6000aMemorySegmentsBySamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetMaximumAvailableMemory ( int16_t handle , uint64_t * nMaxSamples , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aGetMaximumAvailableMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aQueryMaxSegmentsBySamples ( int16_t handle , uint64_t nSamples , uint32_t nChannelEnabled , uint64_t * nMaxSegments , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint32voidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aQueryMaxSegmentsBySamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint32', 'uint64Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetChannelOn ( int16_t handle , PICO_CHANNEL channel , PICO_COUPLING coupling , PICO_CONNECT_PROBE_RANGE range , double analogueOffset , PICO_BANDWIDTH_LIMITER bandwidth ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELPICO_COUPLINGPICO_CONNECT_PROBE_RANGEdoublePICO_BANDWIDTH_LIMITERThunk';fcns.name{fcnNum}='ps6000aSetChannelOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'enPicoCoupling', 'enPicoConnectProbeRange', 'double', 'enPicoBandwidthLimiter'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetChannelOff ( int16_t handle , PICO_CHANNEL channel ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELThunk';fcns.name{fcnNum}='ps6000aSetChannelOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetDigitalPortOn ( int16_t handle , PICO_CHANNEL port , int16_t * logicThresholdLevel , int16_t logicThresholdLevelLength , PICO_DIGITAL_PORT_HYSTERESIS hysteresis ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16PICO_DIGITAL_PORT_HYSTERESISThunk';fcns.name{fcnNum}='ps6000aSetDigitalPortOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'int16Ptr', 'int16', 'enPicoDigitalPortHysteresis'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetDigitalPortOff ( int16_t handle , PICO_CHANNEL port ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELThunk';fcns.name{fcnNum}='ps6000aSetDigitalPortOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetTimebase ( int16_t handle , uint32_t timebase , uint64_t noSamples , double * timeIntervalNanoseconds , uint64_t * maxSamples , uint64_t segmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16uint32uint64voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='ps6000aGetTimebase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint64', 'doublePtr', 'uint64Ptr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenWaveform ( int16_t handle , PICO_WAVE_TYPE waveType , int16_t * buffer , uint64_t bufferLength ); 
fcns.thunkname{fcnNum}='uint32int16PICO_WAVE_TYPEvoidPtruint64Thunk';fcns.name{fcnNum}='ps6000aSigGenWaveform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoWaveType', 'int16Ptr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenRange ( int16_t handle , double peakToPeakVolts , double offsetVolts ); 
fcns.thunkname{fcnNum}='uint32int16doubledoubleThunk';fcns.name{fcnNum}='ps6000aSigGenRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenWaveformDutyCycle ( int16_t handle , double dutyCyclePercent ); 
fcns.thunkname{fcnNum}='uint32int16doubleThunk';fcns.name{fcnNum}='ps6000aSigGenWaveformDutyCycle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenTrigger ( int16_t handle , PICO_SIGGEN_TRIG_TYPE triggerType , PICO_SIGGEN_TRIG_SOURCE triggerSource , uint64_t cycles , uint64_t autoTriggerPicoSeconds ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_TRIG_TYPEPICO_SIGGEN_TRIG_SOURCEuint64uint64Thunk';fcns.name{fcnNum}='ps6000aSigGenTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenTrigType', 'enPicoSigGenTrigSource', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenFilter ( int16_t handle , PICO_SIGGEN_FILTER_STATE filterState ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_FILTER_STATEThunk';fcns.name{fcnNum}='ps6000aSigGenFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenFilterState'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenFrequency ( int16_t handle , double frequencyHz ); 
fcns.thunkname{fcnNum}='uint32int16doubleThunk';fcns.name{fcnNum}='ps6000aSigGenFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenFrequencySweep ( int16_t handle , double stopFrequencyHz , double frequencyIncrement , double dwellTimeSeconds , PICO_SWEEP_TYPE sweepType ); 
fcns.thunkname{fcnNum}='uint32int16doubledoubledoublePICO_SWEEP_TYPEThunk';fcns.name{fcnNum}='ps6000aSigGenFrequencySweep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'double', 'double', 'enPicoSweepType'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenPhase ( int16_t handle , uint64_t deltaPhase ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='ps6000aSigGenPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenPhaseSweep ( int16_t handle , uint64_t stopDeltaPhase , uint64_t deltaPhaseIncrement , uint64_t dwellCount , PICO_SWEEP_TYPE sweepType ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64PICO_SWEEP_TYPEThunk';fcns.name{fcnNum}='ps6000aSigGenPhaseSweep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'enPicoSweepType'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenClockManual ( int16_t handle , double dacClockFrequency , uint64_t prescaleRatio ); 
fcns.thunkname{fcnNum}='uint32int16doubleuint64Thunk';fcns.name{fcnNum}='ps6000aSigGenClockManual'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenSoftwareTriggerControl ( int16_t handle , PICO_SIGGEN_TRIG_TYPE triggerState ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_TRIG_TYPEThunk';fcns.name{fcnNum}='ps6000aSigGenSoftwareTriggerControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenTrigType'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenApply ( int16_t handle , int16_t sigGenEnabled , int16_t sweepEnabled , int16_t triggerEnabled , int16_t automaticClockOptimisationEnabled , int16_t overrideAutomaticClockAndPrescale , double * frequency , double * stopFrequency , double * frequencyIncrement , double * dwellTime ); 
fcns.thunkname{fcnNum}='uint32int16int16int16int16int16int16voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aSigGenApply'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenLimits ( int16_t handle , PICO_SIGGEN_PARAMETER parameter , double * minimumPermissibleValue , double * maximumPermissibleValue , double * step ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_PARAMETERvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aSigGenLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenParameter', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenFrequencyLimits ( int16_t handle , PICO_WAVE_TYPE waveType , uint64_t * numSamples , double * startFrequency , int16_t sweepEnabled , double * manualDacClockFrequency , uint64_t * manualPrescaleRatio , double * maxStopFrequencyOut , double * minFrequencyStepOut , double * maxFrequencyStepOut , double * minDwellTimeOut , double * maxDwellTimeOut ); 
fcns.thunkname{fcnNum}='uint32int16PICO_WAVE_TYPEvoidPtrvoidPtrint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aSigGenFrequencyLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoWaveType', 'uint64Ptr', 'doublePtr', 'int16', 'doublePtr', 'uint64Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenPause ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aSigGenPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSigGenRestart ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aSigGenRestart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetSimpleTrigger ( int16_t handle , int16_t enable , PICO_CHANNEL source , int16_t threshold , PICO_THRESHOLD_DIRECTION direction , uint64_t delay , uint32_t autoTriggerMicroSeconds ); 
fcns.thunkname{fcnNum}='uint32int16int16PICO_CHANNELint16PICO_THRESHOLD_DIRECTIONuint64uint32Thunk';fcns.name{fcnNum}='ps6000aSetSimpleTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16', 'enPicoChannel', 'int16', 'enPicoThresholdDirection', 'uint64', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aTriggerWithinPreTriggerSamples ( int16_t handle , PICO_TRIGGER_WITHIN_PRE_TRIGGER state ); 
fcns.thunkname{fcnNum}='uint32int16PICO_TRIGGER_WITHIN_PRE_TRIGGERThunk';fcns.name{fcnNum}='ps6000aTriggerWithinPreTriggerSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoTriggerWithinPreTrigger'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetTriggerChannelProperties ( int16_t handle , PICO_TRIGGER_CHANNEL_PROPERTIES * channelProperties , int16_t nChannelProperties , int16_t auxOutputEnable , uint32_t autoTriggerMicroSeconds ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16int16uint32Thunk';fcns.name{fcnNum}='ps6000aSetTriggerChannelProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoTriggerChannelPropertiesPtr', 'int16', 'int16', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetTriggerChannelConditions ( int16_t handle , PICO_CONDITION * conditions , int16_t nConditions , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16PICO_ACTIONThunk';fcns.name{fcnNum}='ps6000aSetTriggerChannelConditions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoConditionPtr', 'int16', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetTriggerChannelDirections ( int16_t handle , PICO_DIRECTION * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='ps6000aSetTriggerChannelDirections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoDirectionPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetTriggerDelay ( int16_t handle , uint64_t delay ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='ps6000aSetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetPulseWidthQualifierProperties ( int16_t handle , uint32_t lower , uint32_t upper , PICO_PULSE_WIDTH_TYPE type ); 
fcns.thunkname{fcnNum}='uint32int16uint32uint32PICO_PULSE_WIDTH_TYPEThunk';fcns.name{fcnNum}='ps6000aSetPulseWidthQualifierProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'enPicoPulseWidthType'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetPulseWidthQualifierConditions ( int16_t handle , PICO_CONDITION * conditions , int16_t nConditions , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16PICO_ACTIONThunk';fcns.name{fcnNum}='ps6000aSetPulseWidthQualifierConditions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoConditionPtr', 'int16', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetPulseWidthQualifierDirections ( int16_t handle , PICO_DIRECTION * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='ps6000aSetPulseWidthQualifierDirections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoDirectionPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetTriggerDigitalPortProperties ( int16_t handle , PICO_CHANNEL port , PICO_DIGITAL_CHANNEL_DIRECTIONS * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16Thunk';fcns.name{fcnNum}='ps6000aSetTriggerDigitalPortProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'tDigitalChannelDirectionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetPulseWidthDigitalPortProperties ( int16_t handle , PICO_CHANNEL port , PICO_DIGITAL_CHANNEL_DIRECTIONS * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16Thunk';fcns.name{fcnNum}='ps6000aSetPulseWidthDigitalPortProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'tDigitalChannelDirectionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetTriggerTimeOffset ( int16_t handle , int64_t * time , PICO_TIME_UNITS * timeUnits , uint64_t segmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='ps6000aGetTriggerTimeOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPicoTimeUnitsPtr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValuesTriggerTimeOffsetBulk ( int16_t handle , int64_t * times , PICO_TIME_UNITS * timeUnits , uint64_t fromSegmentIndex , uint64_t toSegmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtruint64uint64Thunk';fcns.name{fcnNum}='ps6000aGetValuesTriggerTimeOffsetBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPicoTimeUnitsPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetDataBuffer ( int16_t handle , PICO_CHANNEL channel , PICO_POINTER buffer , int32_t nSamples , PICO_DATA_TYPE dataType , uint64_t waveform , PICO_RATIO_MODE downSampleRatioMode , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint32PICO_DATA_TYPEuint64PICO_RATIO_MODEPICO_ACTIONThunk';fcns.name{fcnNum}='ps6000aSetDataBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'voidPtr', 'int32', 'enPicoDataType', 'uint64', 'enPicoRatioMode', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetDataBuffers ( int16_t handle , PICO_CHANNEL channel , PICO_POINTER bufferMax , PICO_POINTER bufferMin , int32_t nSamples , PICO_DATA_TYPE dataType , uint64_t waveform , PICO_RATIO_MODE downSampleRatioMode , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrvoidPtrint32PICO_DATA_TYPEuint64PICO_RATIO_MODEPICO_ACTIONThunk';fcns.name{fcnNum}='ps6000aSetDataBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'voidPtr', 'voidPtr', 'int32', 'enPicoDataType', 'uint64', 'enPicoRatioMode', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aRunBlock ( int16_t handle , uint64_t noOfPreTriggerSamples , uint64_t noOfPostTriggerSamples , uint32_t timebase , double * timeIndisposedMs , uint64_t segmentIndex , ps6000aBlockReady lpReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint32voidPtruint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aRunBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint32', 'doublePtr', 'uint64', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aIsReady ( int16_t handle , int16_t * ready ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aIsReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aRunStreaming ( int16_t handle , double * sampleInterval , PICO_TIME_UNITS sampleIntervalTimeUnits , uint64_t maxPreTriggerSamples , uint64_t maxPostPreTriggerSamples , int16_t autoStop , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrPICO_TIME_UNITSuint64uint64int16uint64PICO_RATIO_MODEThunk';fcns.name{fcnNum}='ps6000aRunStreaming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'doublePtr', 'enPicoTimeUnits', 'uint64', 'uint64', 'int16', 'uint64', 'enPicoRatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetStreamingLatestValues ( int16_t handle , PICO_STREAMING_DATA_INFO * streamingDataInfo , uint64_t nStreamingDataInfos , PICO_STREAMING_DATA_TRIGGER_INFO * triggerInfo ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint64voidPtrThunk';fcns.name{fcnNum}='ps6000aGetStreamingLatestValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoStreamingDataInfoPtr', 'uint64', 'tPicoStreamingDataTriggerInfoPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aNoOfStreamingValues ( int16_t handle , uint64_t * noOfValues ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aNoOfStreamingValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValues ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t segmentIndex , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64PICO_RATIO_MODEuint64voidPtrThunk';fcns.name{fcnNum}='ps6000aGetValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'enPicoRatioMode', 'uint64', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValuesBulk ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64uint64uint64PICO_RATIO_MODEvoidPtrThunk';fcns.name{fcnNum}='ps6000aGetValuesBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValuesAsync ( int16_t handle , uint64_t startIndex , uint64_t noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t segmentIndex , PICO_POINTER lpDataReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64PICO_RATIO_MODEuint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aGetValuesAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'uint64', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValuesBulkAsync ( int16_t handle , uint64_t startIndex , uint64_t noOfSamples , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , PICO_POINTER lpDataReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64uint64uint64PICO_RATIO_MODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aGetValuesBulkAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetValuesOverlapped ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64PICO_RATIO_MODEuint64uint64voidPtrThunk';fcns.name{fcnNum}='ps6000aGetValuesOverlapped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'enPicoRatioMode', 'uint64', 'uint64', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aStopUsingGetValuesOverlapped ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aStopUsingGetValuesOverlapped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetNoOfCaptures ( int16_t handle , uint64_t * nCaptures ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aGetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetNoOfProcessedCaptures ( int16_t handle , uint64_t * nProcessedCaptures ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aGetNoOfProcessedCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aStop ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aStop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetNoOfCaptures ( int16_t handle , uint64_t nCaptures ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='ps6000aSetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetTriggerInfo ( int16_t handle , PICO_TRIGGER_INFO * triggerInfo , uint64_t firstSegmentIndex , uint64_t segmentCount ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint64uint64Thunk';fcns.name{fcnNum}='ps6000aGetTriggerInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoTriggerInfoPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aEnumerateUnits ( int16_t * count , int8_t * serials , int16_t * serialLth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aEnumerateUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int8Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aPingUnit ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='ps6000aPingUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetAnalogueOffsetLimits ( int16_t handle , PICO_CONNECT_PROBE_RANGE range , PICO_COUPLING coupling , double * maximumVoltage , double * minimumVoltage ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CONNECT_PROBE_RANGEPICO_COUPLINGvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aGetAnalogueOffsetLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoConnectProbeRange', 'enPicoCoupling', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetMinimumTimebaseStateless ( int16_t handle , PICO_CHANNEL_FLAGS enabledChannelFlags , uint32_t * timebase , double * timeInterval , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNEL_FLAGSvoidPtrvoidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aGetMinimumTimebaseStateless'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannelFlags', 'uint32Ptr', 'doublePtr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aNearestSampleIntervalStateless ( int16_t handle , PICO_CHANNEL_FLAGS enabledChannelFlags , double timeIntervalRequested , PICO_DEVICE_RESOLUTION resolution , uint32_t * timebase , double * timeIntervalAvailable ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNEL_FLAGSdoublePICO_DEVICE_RESOLUTIONvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aNearestSampleIntervalStateless'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannelFlags', 'double', 'enPicoDeviceResolution', 'uint32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aChannelCombinationsStateless ( int16_t handle , PICO_CHANNEL_FLAGS * channelFlagsCombinations , uint32_t * nChannelCombinations , PICO_DEVICE_RESOLUTION resolution , uint32_t timebase ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtrPICO_DEVICE_RESOLUTIONuint32Thunk';fcns.name{fcnNum}='ps6000aChannelCombinationsStateless'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannelFlagsPtr', 'uint32Ptr', 'enPicoDeviceResolution', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetDeviceResolution ( int16_t handle , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16PICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps6000aSetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetDeviceResolution ( int16_t handle , PICO_DEVICE_RESOLUTION * resolution ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aGetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolutionPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aQueryOutputEdgeDetect ( int16_t handle , int16_t * state ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aQueryOutputEdgeDetect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aSetOutputEdgeDetect ( int16_t handle , int16_t state ); 
fcns.thunkname{fcnNum}='uint32int16int16Thunk';fcns.name{fcnNum}='ps6000aSetOutputEdgeDetect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetScalingValues ( int16_t handle , PICO_SCALING_FACTORS_VALUES * scalingValues , int16_t nChannels ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='ps6000aGetScalingValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoScalingFactorsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aGetAdcLimits ( int16_t handle , PICO_DEVICE_RESOLUTION resolution , int16_t * minValue , int16_t * maxValue ); 
fcns.thunkname{fcnNum}='uint32int16PICO_DEVICE_RESOLUTIONvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aGetAdcLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolution', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aCheckForUpdate ( int16_t handle , PICO_VERSION * current , PICO_VERSION * update , uint16_t * updateRequired ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps6000aCheckForUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoVersionPtr', 'tPicoVersionPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps6000aStartFirmwareUpdate ( int16_t handle , PicoUpdateFirmwareProgress progress ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='ps6000aStartFirmwareUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'FcnPtr'};fcnNum=fcnNum+1;
structs.tPicoTriggerInfo.packing=1;
structs.tPicoTriggerInfo.members=struct('status', 'uint32', 'segmentIndex', 'uint64', 'triggerIndex', 'uint64', 'triggerTime', 'double', 'timeUnits', 'enPicoTimeUnits', 'missedTriggers', 'uint64', 'timeStampCounter', 'uint64');
structs.tPicoTriggerChannelProperties.packing=1;
structs.tPicoTriggerChannelProperties.members=struct('thresholdUpper', 'int16', 'thresholdUpperHysteresis', 'uint16', 'thresholdLower', 'int16', 'thresholdLowerHysteresis', 'uint16', 'channel', 'enPicoChannel');
structs.tPicoCondition.packing=1;
structs.tPicoCondition.members=struct('source', 'enPicoChannel', 'condition', 'enPicoTriggerState');
structs.tPicoDirection.packing=1;
structs.tPicoDirection.members=struct('channel', 'enPicoChannel', 'direction', 'enPicoThresholdDirection', 'thresholdMode', 'enPicoThresholdMode');
structs.tPicoStreamingDataInfo.packing=1;
structs.tPicoStreamingDataInfo.members=struct('channel_', 'enPicoChannel', 'mode_', 'enPicoRatioMode', 'type_', 'enPicoDataType', 'noOfSamples_', 'int32', 'bufferIndex_', 'uint64', 'startIndex_', 'int32', 'overflow_', 'int16');
structs.tPicoStreamingDataTriggerInfo.packing=1;
structs.tPicoStreamingDataTriggerInfo.members=struct('triggerAt_', 'uint64', 'triggered_', 'int16', 'autoStop_', 'int16');
structs.tPicoScalingFactors.packing=1;
structs.tPicoScalingFactors.members=struct('channel', 'enPicoChannel', 'range', 'enPicoConnectProbeRange', 'offset', 'int16', 'scalingFactor', 'double');
structs.tDigitalChannelDirections.packing=1;
structs.tDigitalChannelDirections.members=struct('channel', 'enPicoPortDigitalChannel', 'direction', 'enPicoDigitalDirection');
structs.tPicoVersion.packing=1;
structs.tPicoVersion.members=struct('major_', 'int16', 'minor_', 'int16', 'revision_', 'int16', 'build_', 'int16');
enuminfo.enPicoSigGenParameter=struct('PICO_SIGGEN_PARAM_OUTPUT_VOLTS',0,'PICO_SIGGEN_PARAM_SAMPLE',1,'PICO_SIGGEN_PARAM_BUFFER_LENGTH',2);
enuminfo.enPicoAction=struct('PICO_CLEAR_ALL',1,'PICO_ADD',2,'PICO_CLEAR_THIS_DATA_BUFFER',4096,'PICO_CLEAR_WAVEFORM_DATA_BUFFERS',8192,'PICO_CLEAR_WAVEFORM_READ_DATA_BUFFERS',16384);
enuminfo.enPicoDataType=struct('PICO_INT8_T',0,'PICO_INT16_T',1,'PICO_INT32_T',2,'PICO_UINT32_T',3,'PICO_INT64_T',4);
enuminfo.enPicoSigGenTrigSource=struct('PICO_SIGGEN_NONE',0,'PICO_SIGGEN_SCOPE_TRIG',1,'PICO_SIGGEN_AUX_IN',2,'PICO_SIGGEN_EXT_IN',3,'PICO_SIGGEN_SOFT_TRIG',4,'PICO_SIGGEN_TRIGGER_RAW',5);
enuminfo.enPicoTimeUnits=struct('PICO_FS',0,'PICO_PS',1,'PICO_NS',2,'PICO_US',3,'PICO_MS',4,'PICO_S',5);
enuminfo.enPicoChannelFlags=struct('PICO_CHANNEL_A_FLAGS',1,'PICO_CHANNEL_B_FLAGS',2,'PICO_CHANNEL_C_FLAGS',4,'PICO_CHANNEL_D_FLAGS',8,'PICO_CHANNEL_E_FLAGS',16,'PICO_CHANNEL_F_FLAGS',32,'PICO_CHANNEL_G_FLAGS',64,'PICO_CHANNEL_H_FLAGS',128,'PICO_PORT0_FLAGS',65536,'PICO_PORT1_FLAGS',131072,'PICO_PORT2_FLAGS',262144,'PICO_PORT3_FLAGS',524288);
enuminfo.enPicoSigGenTrigType=struct('PICO_SIGGEN_RISING',0,'PICO_SIGGEN_FALLING',1,'PICO_SIGGEN_GATE_HIGH',2,'PICO_SIGGEN_GATE_LOW',3);
enuminfo.enPicoCoupling=struct('PICO_AC',0,'PICO_DC',1,'PICO_DC_50OHM',50);
enuminfo.enPicoTriggerWithinPreTrigger=struct('PICO_DISABLE',0,'PICO_ARM',1);
enuminfo.enPicoDigitalPortHysteresis=struct('PICO_VERY_HIGH_400MV',0,'PICO_HIGH_200MV',1,'PICO_NORMAL_100MV',2,'PICO_LOW_50MV',3);
enuminfo.enPicoPulseWidthType=struct('PICO_PW_TYPE_NONE',0,'PICO_PW_TYPE_LESS_THAN',1,'PICO_PW_TYPE_GREATER_THAN',2,'PICO_PW_TYPE_IN_RANGE',3,'PICO_PW_TYPE_OUT_OF_RANGE',4);
enuminfo.enPicoTriggerState=struct('PICO_CONDITION_DONT_CARE',0,'PICO_CONDITION_TRUE',1,'PICO_CONDITION_FALSE',2);
enuminfo.enPicoDigitalDirection=struct('PICO_DIGITAL_DONT_CARE',0,'PICO_DIGITAL_DIRECTION_LOW',1,'PICO_DIGITAL_DIRECTION_HIGH',2,'PICO_DIGITAL_DIRECTION_RISING',3,'PICO_DIGITAL_DIRECTION_FALLING',4,'PICO_DIGITAL_DIRECTION_RISING_OR_FALLING',5,'PICO_DIGITAL_MAX_DIRECTION',6);
enuminfo.enPicoThresholdDirection=struct('PICO_ABOVE',0,'PICO_BELOW',1,'PICO_RISING',2,'PICO_FALLING',3,'PICO_RISING_OR_FALLING',4,'PICO_ABOVE_LOWER',5,'PICO_BELOW_LOWER',6,'PICO_RISING_LOWER',7,'PICO_FALLING_LOWER',8,'PICO_INSIDE',0,'PICO_OUTSIDE',1,'PICO_ENTER',2,'PICO_EXIT',3,'PICO_ENTER_OR_EXIT',4,'PICO_POSITIVE_RUNT',9,'PICO_NEGATIVE_RUNT',10,'PICO_LOGIC_LOWER',1000,'PICO_LOGIC_UPPER',1001,'PICO_NONE',2);
enuminfo.enPicoChannel=struct('PICO_CHANNEL_A',0,'PICO_CHANNEL_B',1,'PICO_CHANNEL_C',2,'PICO_CHANNEL_D',3,'PICO_CHANNEL_E',4,'PICO_CHANNEL_F',5,'PICO_CHANNEL_G',6,'PICO_CHANNEL_H',7,'PICO_PORT0',128,'PICO_PORT1',129,'PICO_PORT2',130,'PICO_PORT3',131,'PICO_EXTERNAL',1000,'PICO_TRIGGER_AUX',1001,'PICO_PULSE_WIDTH_SOURCE',268435456,'PICO_DIGITAL_SOURCE',268435457);
enuminfo.enPicoConnectProbeRange=struct('PICO_X1_PROBE_10MV',0,'PICO_X1_PROBE_20MV',1,'PICO_X1_PROBE_50MV',2,'PICO_X1_PROBE_100MV',3,'PICO_X1_PROBE_200MV',4,'PICO_X1_PROBE_500MV',5,'PICO_X1_PROBE_1V',6,'PICO_X1_PROBE_2V',7,'PICO_X1_PROBE_5V',8,'PICO_X1_PROBE_10V',9,'PICO_X1_PROBE_20V',10,'PICO_X1_PROBE_50V',11,'PICO_X1_PROBE_100V',12,'PICO_X1_PROBE_200V',13,'PICO_X1_PROBE_RANGES',14,'PICO_X10_PROBE_100MV',32,'PICO_X10_PROBE_200MV',33,'PICO_X10_PROBE_500MV',34,'PICO_X10_PROBE_1V',35,'PICO_X10_PROBE_2V',36,'PICO_X10_PROBE_5V',37,'PICO_X10_PROBE_10V',38,'PICO_X10_PROBE_20V',39,'PICO_X10_PROBE_50V',40,'PICO_X10_PROBE_100V',41,'PICO_X10_PROBE_200V',42,'PICO_X10_PROBE_500V',43,'PICO_X10_PROBE_RANGES',12,'PICO_PS4000A_RESISTANCE_315K',512,'PICO_PS4000A_RESISTANCE_1100K',513,'PICO_PS4000A_RESISTANCE_10M',514,'PICO_PS4000A_MAX_RESISTANCE_RANGES',3,'PICO_PS4000A_RESISTANCE_ADCV_FLAG',268435456,'PICO_CONNECT_PROBE_OFF',1024,'PICO_D9_BNC_10MV',0,'PICO_D9_BNC_20MV',1,'PICO_D9_BNC_50MV',2,'PICO_D9_BNC_100MV',3,'PICO_D9_BNC_200MV',4,'PICO_D9_BNC_500MV',5,'PICO_D9_BNC_1V',6,'PICO_D9_BNC_2V',7,'PICO_D9_BNC_5V',8,'PICO_D9_BNC_10V',9,'PICO_D9_BNC_20V',10,'PICO_D9_BNC_50V',11,'PICO_D9_BNC_100V',12,'PICO_D9_BNC_200V',13,'PICO_MAX_D9_BNC_RANGES',14,'PICO_D9_2X_BNC_10MV',0,'PICO_D9_2X_BNC_20MV',1,'PICO_D9_2X_BNC_50MV',2,'PICO_D9_2X_BNC_100MV',3,'PICO_D9_2X_BNC_200MV',4,'PICO_D9_2X_BNC_500MV',5,'PICO_D9_2X_BNC_1V',6,'PICO_D9_2X_BNC_2V',7,'PICO_D9_2X_BNC_5V',8,'PICO_D9_2X_BNC_10V',9,'PICO_D9_2X_BNC_20V',10,'PICO_D9_2X_BNC_50V',11,'PICO_D9_2X_BNC_100V',12,'PICO_D9_2X_BNC_200V',13,'PICO_MAX_D9_2X_BNC_RANGES',14,'PICO_DIFFERENTIAL_10MV',0,'PICO_DIFFERENTIAL_20MV',1,'PICO_DIFFERENTIAL_50MV',2,'PICO_DIFFERENTIAL_100MV',3,'PICO_DIFFERENTIAL_200MV',4,'PICO_DIFFERENTIAL_500MV',5,'PICO_DIFFERENTIAL_1V',6,'PICO_DIFFERENTIAL_2V',7,'PICO_DIFFERENTIAL_5V',8,'PICO_DIFFERENTIAL_10V',9,'PICO_DIFFERENTIAL_20V',10,'PICO_DIFFERENTIAL_50V',11,'PICO_DIFFERENTIAL_100V',12,'PICO_DIFFERENTIAL_200V',13,'PICO_MAX_DIFFERENTIAL_RANGES',14,'PICO_CURRENT_CLAMP_200A_2kA_1A',4000,'PICO_CURRENT_CLAMP_200A_2kA_2A',4001,'PICO_CURRENT_CLAMP_200A_2kA_5A',4002,'PICO_CURRENT_CLAMP_200A_2kA_10A',4003,'PICO_CURRENT_CLAMP_200A_2kA_20A',4004,'PICO_CURRENT_CLAMP_200A_2kA_50A',4005,'PICO_CURRENT_CLAMP_200A_2kA_100A',4006,'PICO_CURRENT_CLAMP_200A_2kA_200A',4007,'PICO_CURRENT_CLAMP_200A_2kA_500A',4008,'PICO_CURRENT_CLAMP_200A_2kA_1000A',4009,'PICO_CURRENT_CLAMP_200A_2kA_2000A',4010,'PICO_MAX_CURRENT_CLAMP_200A_2kA_RANGES',11,'PICO_CURRENT_CLAMP_40A_100mA',5000,'PICO_CURRENT_CLAMP_40A_200mA',5001,'PICO_CURRENT_CLAMP_40A_500mA',5002,'PICO_CURRENT_CLAMP_40A_1A',5003,'PICO_CURRENT_CLAMP_40A_2A',5004,'PICO_CURRENT_CLAMP_40A_5A',5005,'PICO_CURRENT_CLAMP_40A_10A',5006,'PICO_CURRENT_CLAMP_40A_20A',5007,'PICO_CURRENT_CLAMP_40A_40A',5008,'PICO_MAX_CURRENT_CLAMP_40A_RANGES',9,'PICO_1KV_2_5V',6003,'PICO_1KV_5V',6004,'PICO_1KV_12_5V',6005,'PICO_1KV_25V',6006,'PICO_1KV_50V',6007,'PICO_1KV_125V',6008,'PICO_1KV_250V',6009,'PICO_1KV_500V',6010,'PICO_1KV_1000V',6011,'PICO_MAX_1KV_RANGES',9,'PICO_CURRENT_CLAMP_2000ARMS_10A',6500,'PICO_CURRENT_CLAMP_2000ARMS_20A',6501,'PICO_CURRENT_CLAMP_2000ARMS_50A',6502,'PICO_CURRENT_CLAMP_2000ARMS_100A',6503,'PICO_CURRENT_CLAMP_2000ARMS_200A',6504,'PICO_CURRENT_CLAMP_2000ARMS_500A',6505,'PICO_CURRENT_CLAMP_2000ARMS_1000A',6506,'PICO_CURRENT_CLAMP_2000ARMS_2000A',6507,'PICO_CURRENT_CLAMP_2000ARMS_5000A',6508,'PICO_CURRENT_CLAMP_2000ARMS_RANGES',9,'PICO_RESISTANCE_LEAD_NEG5_TO_20OHM',7000,'PICO_RESISTANCE_LEAD_NEG50_TO_200OHM',7001,'PICO_RESISTANCE_LEAD_NEG500_TO_2KOHM',7002,'PICO_RESISTANCE_LEAD_NEG5K_TO_20KOHM',7003,'PICO_RESISTANCE_LEAD_NEG50K_TO_LEAD_200KOHM',7004,'PICO_RESISTANCE_LEAD_NEG500K_TO_LEAD_2MOHM',7005,'PICO_RESISTANCE_LEAD_DIODE_TEST',7006,'PICO_MAX_RESISTANCE_LEAD_RANGES',6,'PICO_HT_NEG3_TO_5KV',8950,'PICO_HT_NEG3_TO_10KV',8951,'PICO_HT_NEG5_TO_20KV',8952,'PICO_HT_NEG5_TO_50KV',8953,'PICO_HT_NEG5_TO_100KV',8954,'PICO_HT_NEG3_TO_5KV_INVERTED',8955,'PICO_HT_NEG3_TO_10KV_INVERTED',8956,'PICO_HT_NEG5_TO_20KV_INVERTED',8957,'PICO_HT_NEG5_TO_50KV_INVERTED',8958,'PICO_HT_NEG5_TO_100KV_INVERTED',8959,'PICO_MAX_HT_RANGES',10,'PICO_TEMPERATURE_NEG50_TO_150DEGC',9000,'PICO_PRESSURE_SENSOR_NEG100000_TO_150000_PASCALS',9100,'PICO_PRESSURE_SENSOR_NEG100000_TO_400000_PASCALS',9101,'PICO_PRESSURE_SENSOR_NEG200000_TO_800000_PASCALS',9102,'PICO_PRESSURE_SENSOR_NEG400000_TO_1600000_PASCALS',9103,'PICO_PRESSURE_SENSOR_NEG400000_TO_3400000_PASCALS',9104,'PICO_PRESSURE_SENSOR_NEG150000_TO_1350000_PASCALS',9105,'PICO_CURRENT_CLAMP_100A_2_5A',10000,'PICO_CURRENT_CLAMP_100A_5A',10001,'PICO_CURRENT_CLAMP_100A_10A',10002,'PICO_CURRENT_CLAMP_100A_25A',10003,'PICO_CURRENT_CLAMP_100A_50A',10004,'PICO_CURRENT_CLAMP_100A_100A',10005,'PICO_CURRENT_CLAMP_60A_2A',10500,'PICO_CURRENT_CLAMP_60A_5A',10501,'PICO_CURRENT_CLAMP_60A_10A',10502,'PICO_CURRENT_CLAMP_60A_20A',10503,'PICO_CURRENT_CLAMP_60A_50A',10504,'PICO_CURRENT_CLAMP_60A_60A',10505,'PICO_OPTICAL_SENSOR_10V',10550,'PICO_CURRENT_CLAMP_60A_V2_0_5A',10600,'PICO_CURRENT_CLAMP_60A_V2_1A',10601,'PICO_CURRENT_CLAMP_60A_V2_2A',10602,'PICO_CURRENT_CLAMP_60A_V2_5A',10603,'PICO_CURRENT_CLAMP_60A_V2_10A',10604,'PICO_CURRENT_CLAMP_60A_V2_20A',10605,'PICO_CURRENT_CLAMP_60A_V2_50A',10606,'PICO_CURRENT_CLAMP_60A_V2_60A',10607);
enuminfo.enPicoBandwidthLimiter=struct('PICO_BW_FULL',0,'PICO_BW_100KHZ',100000,'PICO_BW_20KHZ',20000,'PICO_BW_1MHZ',1000000,'PICO_BW_20MHZ',20000000,'PICO_BW_25MHZ',25000000,'PICO_BW_50MHZ',50000000,'PICO_BW_200MHZ',200000000,'PICO_BW_250MHZ',250000000,'PICO_BW_500MHZ',500000000);
enuminfo.enPicoPortDigitalChannel=struct('PICO_PORT_DIGITAL_CHANNEL0',0,'PICO_PORT_DIGITAL_CHANNEL1',1,'PICO_PORT_DIGITAL_CHANNEL2',2,'PICO_PORT_DIGITAL_CHANNEL3',3,'PICO_PORT_DIGITAL_CHANNEL4',4,'PICO_PORT_DIGITAL_CHANNEL5',5,'PICO_PORT_DIGITAL_CHANNEL6',6,'PICO_PORT_DIGITAL_CHANNEL7',7);
enuminfo.enPicoThresholdMode=struct('PICO_LEVEL',0,'PICO_WINDOW',1);
enuminfo.enPicoRatioMode=struct('PICO_RATIO_MODE_AGGREGATE',1,'PICO_RATIO_MODE_DECIMATE',2,'PICO_RATIO_MODE_AVERAGE',4,'PICO_RATIO_MODE_DISTRIBUTION',8,'PICO_RATIO_MODE_SUM',16,'PICO_RATIO_MODE_TRIGGER_DATA_FOR_TIME_CALCULATION',268435456,'PICO_RATIO_MODE_SEGMENT_HEADER',536870912,'PICO_RATIO_MODE_TRIGGER',1073741824,'PICO_RATIO_MODE_RAW',2147483648);
enuminfo.enPicoSigGenFilterState=struct('PICO_SIGGEN_FILTER_AUTO',0,'PICO_SIGGEN_FILTER_OFF',1,'PICO_SIGGEN_FILTER_ON',2);
enuminfo.enPicoWaveType=struct('PICO_SINE',17,'PICO_SQUARE',18,'PICO_TRIANGLE',19,'PICO_RAMP_UP',20,'PICO_RAMP_DOWN',21,'PICO_SINC',22,'PICO_GAUSSIAN',23,'PICO_HALF_SINE',24,'PICO_DC_VOLTAGE',1024,'PICO_PWM',4096,'PICO_WHITENOISE',8193,'PICO_PRBS',8194,'PICO_ARBITRARY',268435456);
enuminfo.enPicoSweepType=struct('PICO_UP',0,'PICO_DOWN',1,'PICO_UPDOWN',2,'PICO_DOWNUP',3);
enuminfo.enPicoDeviceResolution=struct('PICO_DR_8BIT',0,'PICO_DR_12BIT',1,'PICO_DR_14BIT',2,'PICO_DR_15BIT',3,'PICO_DR_16BIT',4,'PICO_DR_10BIT',10);
methodinfo=fcns;